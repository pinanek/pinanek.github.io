---
/* eslint astro/no-unused-css-selector: "off" */

import type { MarkdownHeading } from "astro";

interface Props {
  headings: MarkdownHeading[];
}

const { headings } = Astro.props as Props;
---

<table-of-content>
  <nav>
    <ul>
      {
        headings.map(({ slug, text, depth }) => (
          <li>
            <a
              href={`#${slug}`}
              id={`heading-${slug}`}
              data-selected="false"
              class:list={[depth === 3 && "level-3", depth === 4 && "level-4"]}
            >
              {text}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</table-of-content>

<script>
  class TableOfContent extends HTMLElement {
    private headings: Map<string, HTMLAnchorElement>;
    private currentSelectedId: string;

    constructor() {
      super();

      this.headings = new Map(Array.from(this.querySelectorAll("a")).map((element) => [element.id, element]));

      const idFromLocation = window.location.hash === "" ? "" : `heading-${window.location.hash.slice(1)}`;
      this.currentSelectedId = this.headings.get(idFromLocation) ? idFromLocation : "";

      const postContent = document.getElementById("post-content-container") as HTMLElement;

      const setCurrent: IntersectionObserverCallback = (entries) => {
        for (const entry of entries) {
          if (entry.isIntersecting) {
            const currentSelectedHeading = this.headings.get(this.currentSelectedId);
            if (currentSelectedHeading) {
              currentSelectedHeading.dataset.selected = "false";
            }

            this.currentSelectedId = `heading-${entry.target.id}`;
            this.headings.get(this.currentSelectedId)!.dataset.selected = "true";

            break;
          }
        }
      };

      const observerOptions: IntersectionObserverInit = {
        rootMargin: "-112px 0% -45% 0%",
        threshold: 1,
      };

      const headingsObserver = new IntersectionObserver(setCurrent, observerOptions);

      postContent.querySelectorAll("h2[id], h3[id], h4[id]").forEach((heading) => headingsObserver.observe(heading));
    }
  }

  customElements.define("table-of-content", TableOfContent);
</script>

<style>
  table-of-content {
    width: 100%;
    padding: var(--spacing-2) var(--spacing-6);
    flex-grow: 1;
    box-shadow: var(--box-shadow-inset);
    border-radius: var(--radii-md);
    overflow-y: auto;
    max-height: 30rem;
  }

  @media (--lg) {
    table-of-content {
      width: 20rem;
    }
  }

  ul {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-2);
    width: 100%;
    padding: 0;
  }

  li {
    list-style-type: none;
    background-color: var(--color-transparent-default);
    transition: background-color var(--duration-default) var(--ease-in-out);
    padding: var(--spacing-0_5) var(--spacing-2);
    border-radius: var(--radii-md);
  }

  li:hover {
    background-color: var(--color-transparent-secondary);
  }

  li:active {
    background-color: var(--color-transparent-tertiary);
  }

  a {
    color: var(--color-text-alt);
    text-decoration: none;
    font-size: 0.9rem;
    transition-property: color, font-weight;
    transition-duration: var(--duration-default);
    transition-timing-function: var(--ease-in-out);
    display: inline-block;
    min-width: 100%;
  }

  a[data-selected="true"] {
    font-weight: var(--font-weight-bold);
    color: var(--color-text-default);
  }

  .level-3 {
    padding-left: var(--spacing-2);
    font-size: 0.875rem;
  }

  .level-4 {
    padding-left: var(--spacing-4);
    font-size: 0.85rem;
  }
</style>
