---
import { languageNames, type Language } from "@/highlighter/languages";
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"pre"> {
  title?: string;
  language: Language;
}

const { language, title, ...props } = Astro.props as Props;

const isShowHeader = title || (!title && language !== "text");
---

<div class="main" {...props}>
  {
    isShowHeader && (
      <div class="header">
        {title && <span>{title}</span>}
        {isShowHeader && <span class="header-language">{languageNames[language]}</span>}
      </div>
    )
  }
  <pre><slot /></pre>
</div>

<style>
  .main {
    margin: 1em 0;
    border-radius: var(--radii-md);
    overflow: hidden;
    transition: background-color var(--duration-default) var(--ease-in-out);
    box-shadow: var(--box-shadow-inset);
  }

  .header {
    display: grid;
    grid-template-columns: 1fr auto;
    padding: var(--spacing-2) var(--spacing-6);
    border-radius: var(--radii-md);
    background-color: var(--color-base-tertiary);
    font-family: var(--font-mono);
    font-variation-settings: var(--font-variant-mono);
    font-weight: var(--font-weight-semi-bold);
    transition-property: color, background-color;
    transition-duration: var(--duration-default);
    transition-timing-function: var(--ease-in-out);
  }

  .header-language {
    grid-column: 2;
  }

  pre {
    padding: var(--spacing-2) var(--spacing-4);
    border-radius: var(--radii-md);
    overflow: auto;
  }

  pre :global(code) {
    font-family: var(--font-mono);
    font-variation-settings: var(--font-variant-mono);
  }

  pre :global(span:where(span.line > span)) {
    transition: color var(--duration-default) var(--ease-in-out);
  }
</style>
