---
import styles from "./header-button.module.css";

type Props = astroHTML.JSX.HTMLAttributes;

const { class: className, ...props } = Astro.props as Props;
---

<menu-button class:list={[styles.main, className]} {...props}>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    fill="none"
    stroke-linecap="round"
    stroke-linejoin="round"
    id="menu-button-closed"
  >
    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
    <line x1="4" y1="6" x2="20" y2="6"></line>
    <line x1="4" y1="12" x2="20" y2="12"></line>
    <line x1="4" y1="18" x2="20" y2="18"></line>
  </svg>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    fill="none"
    stroke-linecap="round"
    stroke-linejoin="round"
    aria-hidden="true"
    id="menu-button-opened"
  >
    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
    <line x1="18" y1="6" x2="6" y2="18"></line>
    <line x1="6" y1="6" x2="18" y2="18"></line>
  </svg>
</menu-button>

<script>
  type HtmlSvg = HTMLElement & SVGElement;

  interface DataValue {
    element: HtmlSvg;
    ariaLabel: string;
  }

  interface Data {
    opened: DataValue;
    closed: DataValue;
  }

  type State = "opened" | "closed";

  class MenuButton extends HTMLElement {
    private data: Data;

    constructor() {
      super();

      this.setAttribute("role", "button");

      document.documentElement.dataset.menuState = "closed";

      this.data = {
        opened: {
          element: this.querySelector("#menu-button-opened") as HtmlSvg,
          ariaLabel: "Close header",
        },
        closed: {
          element: this.querySelector("#menu-button-closed") as HtmlSvg,
          ariaLabel: "Open header",
        },
      };

      this.ariaLabel = this.data["opened"].ariaLabel;

      this.addEventListener("click", this.handleClick);
    }

    private handleClick() {
      const root = document.documentElement;

      const oldState = root.dataset.menuState as State;

      root.dataset.menuState = root.dataset.menuState === "opened" ? "closed" : "opened";
      const currentState = root.dataset.menuState as State;

      this.ariaPressed = (currentState === "opened").toString();
      this.ariaLabel = this.data[currentState].ariaLabel;
      this.data[currentState].element.removeAttribute("aria-hidden");
      this.data[oldState].element.setAttribute("aria-hidden", "true");
    }
  }

  customElements.define("menu-button", MenuButton);
</script>
