---
import * as path from "path";
import { PostLayout } from "@/layouts";
import { PostContent } from "@/components/post";
import type { GetStaticPaths, MarkdownHeading } from "astro";
import type { PostData, PostFrontmatter, RawPostFrontmatter } from "@/types/post";

export const getStaticPaths: GetStaticPaths = async () => {
  const posts = await Astro.glob<RawPostFrontmatter>("/content/posts/**/index.mdx");

  const data = posts.map(async ({ Content, frontmatter: rawPostFrontmatter, url, getHeadings }) => {
    const postDirPath = url?.replace(/\/index.mdx$/, "") as string;

    const slug = postDirPath.split(/[/\\]/).pop();

    // Update frontmatter
    const images = await import.meta.glob<ImageMetadata>("/content/posts/**/images/*", { import: "default" });
    const thumbnailPath = path.join("/", postDirPath, rawPostFrontmatter.image.src).replace(/\\/g, "/");
    const imageData = images[thumbnailPath];

    if (!imageData) throw Error("Post thumbnail image: Invalid image path!");

    const { src, width, height } = await imageData();

    // Headings
    const headings = getHeadings();

    const frontmatter: PostFrontmatter = {
      ...rawPostFrontmatter,
      image: {
        ...rawPostFrontmatter.image,
        src,
        width,
        height,
      },
    };

    return {
      params: { post: slug },
      props: {
        Content,
        frontmatter,
        headings,
      },
    };
  });

  return Promise.all(data);
};

interface Props {
  Content: PostData["Content"];
  frontmatter: PostFrontmatter;
  headings: MarkdownHeading[];
}

const { Content, frontmatter, headings } = Astro.props as Props;
---

<PostLayout frontmatter={frontmatter} headings={headings}>
  <PostContent Content={Content} />
</PostLayout>
